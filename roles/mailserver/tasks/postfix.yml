- name: Install Postgres 9.1 on older distributions
  apt: pkg=postgresql-9.1 state=present
  when: ansible_distribution_release != 'trusty' and ansible_distribution_release != 'jessie'
  tags:
    - dependencies

- name: Install Postgres 9.3 on Ubuntu Trusty
  apt: pkg=postgresql-9.3 state=present
  when: ansible_distribution_release == 'trusty'
  tags:
    - dependencies

- name: Install Postgres 9.4 on Debian Jessie
  apt: pkg=postgresql-9.4 state=present
  when: ansible_distribution_release == 'jessie'
  tags:
    - dependencies

- name: Install Postfix and related packages
  apt: pkg={{ item }} state=installed
  with_items:
    - libsasl2-modules
    - postfix
    - postfix-pcre
    - postfix-pgsql
    - postgrey
    - python-psycopg2
    - sasl2-bin
  tags:
    - dependencies

- name: Set postgres password
  command: psql -d {{ db_admin_username }} -c "ALTER USER postgres with  password '{{ db_admin_password }}';"
  become_user: "{{ db_admin_username }}"
  notify: import sql postfix

- name: Create database user for mail server
  postgresql_user: login_host=localhost login_user={{ db_admin_username }} login_password="{{ db_admin_password }}" name={{ mail_db_username }} password="{{ mail_db_password }}" state=present
  notify: import sql postfix

- name: Create database for mail server
  postgresql_db: login_host=localhost login_user={{ db_admin_username }} login_password="{{ db_admin_password }}" name={{ mail_db_database }} state=present owner={{ mail_db_username }}
  notify: import sql postfix

- name: Get Postgres minor version
  shell: psql --version | grep 9. | awk '{ print $3 }' | awk -F. '{ print $2 }'
  register: postgres_minor

- name: Copy sql file to generate current states
  copy: src={{ item }} dest=/etc/postfix/{{ item }} owner=root group=root mode=0600
  with_items:
    - usercheck.sql
    - domaincheck.sql
    - aliascheck.sql

- name: Run the user check
  shell: PGPASSWORD='{{ mail_db_password }}' psql -h localhost -d {{ mail_db_database }} -U {{ mail_db_username }} -f /etc/postfix/usercheck.sql --set ON_ERROR_STOP=1 | tail -n +3 | head -n -2 | awk '{ print $1 }'

  register: mail_users
  ignore_errors: true

- name: Run the domain check
  shell: PGPASSWORD='{{ mail_db_password }}' psql -h localhost -d {{ mail_db_database }} -U {{ mail_db_username }} -f /etc/postfix/domaincheck.sql --set ON_ERROR_STOP=1
  register: mail_domains
  ignore_errors: true

- name: Run the alias check
  shell: PGPASSWORD='{{ mail_db_password }}' psql -h localhost -d {{ mail_db_database }} -U {{ mail_db_username }} -f /etc/postfix/aliascheck.sql --set ON_ERROR_STOP=1 | tail -n +3 | head -n -2 | awk '{ print $1 "," $3 "," $5 }'
  register: mail_aliases
  ignore_errors: true

- name: Copy import.sql
  template: src=mailserver.sql.j2 dest=/etc/postfix/import.sql owner=root group=root mode=0600
  notify: import sql postfix

- name: Create postfix maps directory
  file: path=/etc/postfix/maps state=directory owner=root group=root
  when: mail_header_privacy == 1

- name: Copy smtp_header_checks.pcre
  copy: src=etc_postfix_maps_smtp_header_checks.pcre dest=/etc/postfix/maps/smtp_header_checks.pcre owner=root group=root
  when: mail_header_privacy == 1

- name: Copy main.cf
  template: src=etc_postfix_main.cf.j2 dest=/etc/postfix/main.cf owner=root group=root
  notify: restart postfix

- name: Copy master.cf
  copy: src=etc_postfix_master.cf dest=/etc/postfix/master.cf owner=root group=root
  notify: restart postfix

- name: add nobody user to /etc/aliases for null routing
  lineinfile: dest=/etc/aliases regexp="^nobody" line="nobody{{ ":" }} /dev/null"
  notify: rebuild aliases

- name: Copy additional postfix configuration files
  template: src=etc_postfix_{{ item }}.j2 dest=/etc/postfix/{{ item }} owner=root group=root
  with_items:
    - pgsql-virtual-alias-maps.cf
    - pgsql-virtual-mailbox-domains.cf
    - pgsql-virtual-mailbox-maps.cf
  notify: restart postfix

- name: Set firewall rules for postfix
  ufw: rule=allow port={{ item }} proto=tcp
  with_items:
    - smtp
    - ssmtp
  tags: ufw
